Buenos días Loles

He leído tu mensaje

#+BEGIN_QUOTE
/Lo más importante viene ahora, y es que el problema del isomorfismo de grafos
es un problema sin solución computacional eficiente. Tendría que comprobar si/ 
/alguna de las biyecciones entre dos grafos conserva la adyacencia/ 
#+END_QUOTE

Efectivamente el [[https://en.wikipedia.org/wiki/Graph_isomorphism_problem][problema de isomorfismo de grafos]] es computacionalmente
complejo. Está en la [[https://en.wikipedia.org/wiki/NP_(complexity)][clase de complejidad NP]], al igual que el problema SAT que
hemos visto e implementado en LMF.

Muchos problemas de grafos también están en NP, como puedes ver en 

+ [[https://en.wikipedia.org/wiki/List_of_NP-complete_problems][List of NP-complete problems]], 
+ [[http://www.nada.kth.se/~viggo/wwwcompendium/node8.html][A compendium of NP optimization problems: Graph Theory]] y
+ [[http://www3.cs.stonybrook.edu/~algorith/major_section/1.5.shtml][The Stony Brook Algorithm Repository: Graph Problems -- hard problems]]

Recientemente se ha publicado un nuevo algoritmo para resolver eficientemente
el problema del isomorfismo de grafos. Puedes leerlo en [[https://www.sciencenews.org/article/new-algorithm-cracks-graph-problem][New algorithm cracks
graph problem]]. 

En el trabajo, de momento, no se plantea su solución eficiente. Buscamos una
forma sencilla de reconocer cuando dos grafos son isomorfos. 

La más sencilla es por fuerza bruta: definir un procedimiento para generar
todas las biyecciones entre dos grafos y filtrar las que sean
isomorfismos. Como hicimos en LMF con el problema SAT (generar todas las
interpretaciones y filtrar las que son modelos).

Para empezar no está mal. La primera cuestión es definir una función que dado
dos conjuntos finitos devuelva todas las biyecciones entre ellos. Como ayuda te
puede servir el ejercicio 4 del [[http://bit.ly/29o73Ac][3º examen de I1M]].

Saludos, José A.

